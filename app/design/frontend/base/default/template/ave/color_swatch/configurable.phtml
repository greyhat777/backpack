<?php
/**
 * Magento
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Academic Free License (AFL 3.0)
 * that is bundled with this package in the file LICENSE_AFL.txt.
 * It is also available through the world-wide-web at this URL:
 * http://opensource.org/licenses/afl-3.0.php
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@magentocommerce.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade Magento to newer
 * versions in the future. If you wish to customize Magento for your
 * needs please refer to http://www.magentocommerce.com for more information.
 *
 * @category    design
 * @package     base_default
 * @copyright   Copyright (c) 2012 Magento Inc. (http://www.magentocommerce.com)
 * @license     http://opensource.org/licenses/afl-3.0.php  Academic Free License (AFL 3.0)
 */

$_product = $this->getProduct();
$_attributes = Mage::helper('core')->decorateArray($this->getAllowAttributes());
$sliderOptions = array();
$productHasSwatchAttribute = false;
if ($_product->isSaleable() && count($_attributes)) {
    $configHelper = Mage::helper('ave_colorswatch/config');?>
    <dl id="product<?php echo $_product->getId(); ?>">
        <?php
        $swatchShape = Mage::getStoreConfig('ave_color_swatch/style_settings/swatch_shape');
        $showDefaultInput = Mage::getStoreConfig('ave_color_swatch/product_view_group/product_show_default_input', Mage::app()->getStore());
        $tagInfoModel = Mage::getModel('ave_colorswatch/attribute');
        foreach ($_attributes as $_attribute):
            $tagInfoModel->load($_attribute->getAttributeId());
            $isColorPicker = $tagInfoModel->getData(Ave_ColorSwatch_Model_Observer::IS_COLOR_SWATCH);
            $_attributeId = $_attribute->getAttributeId();
            if ($isColorPicker) {
                $productHasSwatchAttribute = true;
                ?>
                <dt>
                    <label id="label<?php echo $_attributeId ?>"
                           class="required"><em>*</em> <?php echo $_attribute->getLabel() ?></label>
                </dt>
                <dd id="slider-container-<?php echo $_attributeId ?>"
                    class="slider-container  <?php echo $swatchShape; ?>">
                    <div class="colorPickerHolder" id="<?php echo $_attributeId ?>"
                         name="scroller-<?php echo $_attributeId ?>">
                    </div>
                    <?php if ($showDefaultInput) {
                        $display_class = "";
                    } else {
                        $display_class = "no-display";
                    }?>
                    <select name="super_attribute[<?php echo $_attributeId; ?>]"
                            id="attribute<?php echo $_attributeId; ?>"
                            class="required-entry super-attribute-select <?php echo($display_class); ?>">
                        <option><?php echo $this->__('Choose an Option...') ?></option>
                    </select>
                </dd>
            <?php } else { ?>
                <dt><label class="required"><em>*</em><?php echo $_attribute->getLabel() ?></label></dt>
                <dd<?php if ($_attribute->decoratedIsLast){?> class="last"<?php }?>>
                    <div class="input-box">
                        <select name="super_attribute[<?php echo $_attribute->getAttributeId() ?>]" id="attribute<?php echo $_attribute->getAttributeId() ?>" class="required-entry super-attribute-select">
                            <option><?php echo $this->__('Choose an Option...') ?></option>
                          </select>
                      </div>
                </dd>
            <?php } endforeach; ?>
    </dl>
    <script type="application/javascript">
        var spConfig;
        if (<?php echo $productHasSwatchAttribute ? '1' : '0'; ?>) {
            var ave_colorSwatch = null;
            <?php $attrSmallSwatchesIds = $configHelper->getStyleValue('swatch_attributes');
            $idsSmallAttrib = null;
            if (!empty($attrSmallSwatchesIds)) {
                $idsSmallAttrib = explode(',', $attrSmallSwatchesIds);
            }?>
             spConfig = new Ave.SpConfig(
                <?php echo $configHelper->getDefaultOptions($_product);?>,
                <?php echo $configHelper->getJsonConfig($_product);?>,
                optionsPrice, 'view', '<?php echo $attrSmallSwatchesIds; ?>');
            document.observe("dom:loaded", function () {
                ave_colorSwatch = new Ave.ColorPicker(
                    <?php echo $configHelper->getSimpleProductData($_product, 'view');?>, spConfig,
                    <?php echo $configHelper->getConfig(array('colorSwatch'), $_product);?>
                );
                spConfig = null;
            });
        } else {
            spConfig = new Product.Config(<?php echo $this->getJsonConfig() ?>);
        }
    </script>
<?php } ?>